# Tell vim this is a bash file
# vim: set filetype=sh :

# Modified from: http://stackoverflow.com/questions/1616678/bash-pwd-shortening
function _rails_root {
  d=`pwd`
  while [ "$d" != ""  ]; do
    if [ -f "$d"/config/environment.rb ]; then
      break
    fi
    d=${d%/*}
  done
  echo $d
}

function shortened_pwd {
  local begin="" # The unshortened beginning of the path.
  local shortbegin="" # The shortened beginning of the path.
  local current="" # The section of the path we're currently working on.
  local end="${2:-$(pwd)}" # The unmodified rest of the path.
  local RAILS_ROOT="$(_rails_root)"

  # Code to detect if we're in a Rails root directory
  if [[ "$end" =~ "$RAILS_ROOT" ]]; then
      local INRR=1
      end="${end#$RAILS_ROOT}" #strip RAILS_ROOT from start of string
      begin="$RAILS_ROOT"      #start expansion from the right spot
      local rails_base="${RAILS_ROOT##*/}"
  else
      local INRR=0
  fi

  # Code to detect if we're in a user's home directory
  if [[ "$end" =~ "$HOME" ]]; then
      local INHOME=1
      end="${end#$HOME}" #strip /home/username from start of string
      begin="$HOME"      #start expansion from the right spot
  else
      local INHOME=0
  fi

  local base="${end##*/}"
  end="${end%/*}"
  end="${end#/}/" # Strip the first /
  local shortenedpath="$end" # The whole path, to check the length.
  local maxlength="${1:-0}"

  shopt -q nullglob && NGV="-s" || NGV="-u" # Store the value for later.
  shopt -s nullglob    # Without this, anything that doesn't exist in the filesystem turns into */*/*/...

  while [[ "$end" ]] && (( (${#shortenedpath} + ${#base}) > maxlength ))
  do
    current="${end%%/*}" # everything before the first /
    end="${end#*/}"    # everything after the first /

    local shortcur="$current"
    local shortcurstar="$current" # No star if we don't shorten it.

    for ((i=${#current}-2; i>=0; i--)); do
      local subcurrent="${current:0:i}"
      local matching=("$begin/$subcurrent"*) # Array of all files that start with $subcurrent. 
      (( ${#matching[*]} != 1 )) && break # Stop shortening if more than one file matches.
      shortcur="$subcurrent"
      shortcurstar="$subcurrent*"
    done

    #advance
    begin="$begin/$current"
    shortbegin="$shortbegin/$shortcurstar"
    shortenedpath="$shortbegin/$end"
  done
  
  shortenedpath="${shortenedpath%/}" # strip trailing /  
  shortenedpath="$shortenedpath/$base"
  shortenedpath="${shortenedpath#/}" # strip leading /
  
  # Crop the path w/ an indicator if we're in a RAILS_ROOT or a user's home dir
  if [ $INRR -eq 1 ]; then
    if [ "$shortenedpath" != "" ]; then
      echo "RoR=>|$rails_base/$shortenedpath" #make sure it starts with ~/
    else
      echo "RoR=>|$rails_base"
    fi
  else
    if [ $INHOME -eq 1 ]; then
      if [ "$shortenedpath" != "" ]; then
        echo "|~/$shortenedpath" #make sure it starts with ~/
      else
        echo "|~"
      fi
    else
      echo "|/$shortenedpath" # Make sure it starts with /
    fi
  fi

  shopt "$NGV" nullglob # Reset nullglob in case this is being used as a function.
}

# Customized bash prompt for more easily working with git (via hashrocket) -- these aren't used
function parse_git_deleted {
  [[ $(git status 2> /dev/null | grep deleted:) != "" ]] && echo "-"
}
function parse_git_added {
  [[ $(git status 2> /dev/null | grep "Untracked files:") != "" ]] && echo '+'
}
function parse_git_modified {
  [[ $(git status 2> /dev/null | grep modified:) != "" ]] && echo "*"
}

# Simple function to tell you if there are changes yet to be committed
function parse_git_dirty {
  #echo "$(parse_git_added)$(parse_git_modified)$(parse_git_deleted)"
  # git diff --quiet HEAD &>/dev/null; [ $? == 1 ] && echo "!"
  [ $(git status --porcelain | wc -l) -gt 0 ] && echo "!"
}

# Determine the current branch and outputs it or "detached"
function parse_git_branch {
  local BRANCH=`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  if [ "$BRANCH" = "((no branch))" ]
  then
    # Use " \b" - space backspace, because it won't work w/o space between ansi chars and text
    echo -e "($EMC \bdetached)"
  else
    echo $BRANCH
  fi
}

# Either output the current commit's nearest tag, or if not an abbreviated hash
function describe_git_commit {
  local COMMIT="`git describe --tags --always 2> /dev/null`"
  if [ $COMMIT ]
  then
    echo -e "$COMMIT"
  fi
}


function _rvm_ruby_version {
  local version=$(echo $MY_RUBY_HOME | awk -F'-' '{print $2"-"$3}')
  [ "$version" != "" ] && echo $version
}

function _rvm_gemset_name {
  local gemsetname="$(rvm gemset name)"
  local gemsetdir="$(rvm gemset dir)"
  if [ "$gemsetname" != "" ] && [ "$gemsetname" != "$gemsetdir" ]; then
    echo "$gemsetname"
  fi
}

# function __git_dirty {
#   git diff --quiet HEAD &>/dev/null 
#   [ $? == 1 ] && echo "!"
# }

function __git_branch {
  __git_ps1 " %s"
}

function bash_prompt {
  local DEF="\[\033[0m\]"    # unsets color to term's fg color

  # regular colors
  local K="\[\033[0;30m\]"    # black
  local R="\[\033[0;31m\]"    # red
  local G="\[\033[0;32m\]"    # green
  local Y="\[\033[0;33m\]"    # yellow
  local B="\[\033[0;34m\]"    # blue
  local M="\[\033[0;35m\]"    # magenta
  local C="\[\033[0;36m\]"    # cyan
  local W="\[\033[0;37m\]"    # white

  # emphasized (bolded) colors
  local EMK="\[\033[1;30m\]"
  local EMR="\[\033[1;31m\]"
  local EMG="\[\033[1;32m\]"
  local EMY="\[\033[1;33m\]"
  local EMB="\[\033[1;34m\]"
  local EMM="\[\033[1;35m\]"
  local EMC="\[\033[1;36m\]"
  local EMW="\[\033[1;37m\]"

  # background colors
  local BGK="\[\033[40m\]"
  local BGR="\[\033[41m\]"
  local BGG="\[\033[42m\]"
  local BGY="\[\033[43m\]"
  local BGB="\[\033[44m\]"
  local BGM="\[\033[45m\]"
  local BGC="\[\033[46m\]"
  local BGW="\[\033[47m\]"

  local UC=$W                 # user's color
  [ $UID -eq "0" ] && UC=$R   # root's col

  local BRACKET_COLOR=$B

  function rvm_prompt {
    if [ "$(_rvm_gemset_name)" != "" ]; then
      echo "$BRACKET_COLOR[$C$(_rvm_ruby_version)$M@$Y$(_rvm_gemset_name)$BRACKET_COLOR]"
    else
      echo "$BRACKET_COLOR[$C$(_rvm_ruby_version)$BRACKET_COLOR]"
    fi
  }

  function git_prompt {
    if [ $(__gitdir) ]
    then
      echo "$BRACKET_COLOR[$C$(parse_git_branch)$M:$Y$(describe_git_commit)$EMR$(parse_git_dirty)$BRACKET_COLOR]"
    fi
  }

  function short_pwd {
    local shortie="$(shortened_pwd 15)"
    shortie="${shortie/|/$W}"
    echo "$R$shortie"
  }

  local titlebar="\[\033]0;@\h:\W\007\]"
  local curtime="$BRACKET_COLOR[$R\D{%M}$M:$R\D{%S}$BRACKET_COLOR]"
  local whereish="$BRACKET_COLOR[$W\u$M@$G\h$M:$W$(short_pwd)$BRACKET_COLOR]"
  local rvmish="$(rvm_prompt)"
  local gitish="$(git_prompt)"
  PS1="$titlebar$whereish$rvmish$gitish$G\$$DEF"
}

PROMPT_COMMAND="bash_prompt"



